package com.shopme.admin.category;import com.cloudinary.Cloudinary;import com.cloudinary.utils.ObjectUtils;import com.shopme.common.entity.Category;import jakarta.servlet.http.HttpServletResponse;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.repository.query.Param;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.multipart.MultipartFile;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import java.io.IOException;import java.util.List;import java.util.Map;@Controllerpublic class CategoryController {    @Autowired    CategoryService categoryService;    @Autowired    Cloudinary cloudinary;    @GetMapping("/categories")    public String listFirstPage(@Param("sortDir") String sortDir, Model model){        return listByPage(1,sortDir,model,null);    }    @GetMapping("/categories/page/{pageNum}")    public String listByPage(@PathVariable(name = "pageNum") int pageNum, @Param("sortDir") String sortDir, Model model, @Param("keyword") String keyword){        if(sortDir == null || sortDir.isEmpty()){            sortDir = "asc";        }        CategorypageInfo categorypageInfo = new CategorypageInfo();        List<Category> listCategories = categoryService.listByPage(categorypageInfo,pageNum,sortDir,keyword);        String reverseSortDir = sortDir.equals("asc") ? "desc" : "asc";        long startCount = (long) (pageNum - 1) * CategoryService.ROOT_CATEGORIES_PER_PAGE + 1;        long endCount = startCount + CategoryService.ROOT_CATEGORIES_PER_PAGE - 1;        if(endCount > categorypageInfo.getTotalElements()){            endCount = categorypageInfo.getTotalElements();        }        model.addAttribute("totalPages",categorypageInfo.getTotalPages());        model.addAttribute("totalItems",categorypageInfo.getTotalElements());        model.addAttribute("currentPage",pageNum);        model.addAttribute("sortField","name");        model.addAttribute("sortDir",sortDir);        model.addAttribute("keyword",keyword);        model.addAttribute("startCount",startCount);        model.addAttribute("endCount",endCount);        model.addAttribute("listCategories",listCategories);        model.addAttribute("reverseSortDir",reverseSortDir);        return "categories/categories";    }    @GetMapping("/categories/new")    public String newCategory(Model model){        List<Category> listCategories = categoryService.listCategoriesUsedInForm();        model.addAttribute("pageTitle","Create New Category");        model.addAttribute("category",new Category());        model.addAttribute("listCategories",listCategories);        return "categories/category_form";    }    @PostMapping("/categories/save")    public String saveCategory(Category category, @RequestParam("fileImage") MultipartFile multipartFile,                               RedirectAttributes redirectAttributes) throws IOException, CategoryNotFoundException {        if(!multipartFile.isEmpty()){            if(category.getId() != null && categoryService.get(category.getId()).getImage() != null){                categoryService.deleteImageInCloudinary(category);            }            try {                Map r = this.cloudinary.uploader().upload(multipartFile.getBytes(),                        ObjectUtils.asMap("resource_type","auto"));                String img = (String) r.get("secure_url");                category.setImage(img);                Category savedCategory = categoryService.save(category);            } catch (IOException e){                e.printStackTrace();            }        } else{            if (category.getId() == null || categoryService.get(category.getId()).getImage() == null){                category.setImage(null);            }            Category savedCategory = categoryService.save(category);        }        redirectAttributes.addFlashAttribute("message","The category has been saved successfully.");        return "redirect:/categories";    }        @GetMapping("/categories/edit/{id}")    public String editCategory(@PathVariable(name = "id") Integer id, Model model, RedirectAttributes redirectAttributes){        try{            Category category = categoryService.get(id);            List<Category> listCategories = categoryService.listCategoriesUsedInForm();            model.addAttribute("category",category);            model.addAttribute("listCategories",listCategories);            model.addAttribute("pageTitle","Edit Category (ID: " + id + ")");            return "categories/category_form";        } catch (CategoryNotFoundException e) {            redirectAttributes.addFlashAttribute("message",e.getMessage());            return "redirect:/categories";        }    }    @GetMapping("categories/{id}/enabled/{status}")    public String updateCategoryEnabledStatus(@PathVariable("id") Integer id,                                              @PathVariable("status") boolean enabled, RedirectAttributes redirectAttributes){        categoryService.updateCategoryEnabledStatus(id,enabled);        String status = enabled ? "enabled" : "disabled";        String message = "The category ID " + id + " has been " + status;        redirectAttributes.addFlashAttribute("message",message);        return "redirect:/categories";    }    @GetMapping("/categories/delete/{id}")    public String deleteCategory(@PathVariable(name = "id") Integer id, Model model, RedirectAttributes redirectAttributes){        try{            Category category = categoryService.get(id);            if(category.getImage() != null){                categoryService.deleteImageInCloudinary(category);            }            categoryService.delete(id);            redirectAttributes.addFlashAttribute("message","The category ID " + id + " has been deleted successfully");        }catch (CategoryNotFoundException ex){            redirectAttributes.addFlashAttribute("message",ex.getMessage());        } catch (IOException e) {            throw new RuntimeException(e);        }        return "redirect:/categories";    }    @GetMapping("/categories/export/csv")    public void exportToCSV(HttpServletResponse response) throws IOException{        List<Category> listCategories = categoryService.listCategoriesUsedInForm();        CategoryCsvExporter exporter = new CategoryCsvExporter();        exporter.export(listCategories,response);    }}